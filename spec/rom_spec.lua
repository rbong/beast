local beast = require("beast")

local create_rom = beast.rom.create_rom
local read_rom = beast.rom.read_rom

describe("Rom", function()
   it("reads a bank", function()
      local rom = create_rom()
      read_rom(rom, io.open("./spec/fixtures/ret.gb", "rb"))
      assert.truthy(rom.nbanks == 1)
   end)

   it("reads a bank byte", function()
      local rom = create_rom()
      read_rom(rom, io.open("./spec/fixtures/ret.gb", "rb"))
      assert.truthy(rom.banks[0].size == 1)
   end)

   it("reads ret instruction", function()
      local rom = create_rom()
      read_rom(rom, io.open("./spec/fixtures/ret.gb", "rb"))
      assert.are.same(rom.banks[0].instructions, {
         { instruc = "ret" }
      })
   end)

   it("reads basic instructions", function()
      local rom = create_rom()
      read_rom(rom, io.open("./spec/fixtures/basic_instructions.gb", "rb"))
      assert.are.same(rom.banks[0].instructions, {
            { instruc = "nop" },
            { instruc = "halt" },
            { instruc = "di" },
            { instruc = "ei" },
            { instruc = "ld a, a" },
            { instruc = "ld a, b" },
            { instruc = "ld a, c" },
            { instruc = "ld a, d" },
            { instruc = "ld a, e" },
            { instruc = "ld a, h" },
            { instruc = "ld a, l" },
            { instruc = "ld b, a" },
            { instruc = "ld b, b" },
            { instruc = "ld b, c" },
            { instruc = "ld b, d" },
            { instruc = "ld b, e" },
            { instruc = "ld b, h" },
            { instruc = "ld b, l" },
            { instruc = "ld c, a" },
            { instruc = "ld c, b" },
            { instruc = "ld c, c" },
            { instruc = "ld c, d" },
            { instruc = "ld c, e" },
            { instruc = "ld c, h" },
            { instruc = "ld c, l" },
            { instruc = "ld d, a" },
            { instruc = "ld d, b" },
            { instruc = "ld d, c" },
            { instruc = "ld d, d" },
            { instruc = "ld d, e" },
            { instruc = "ld d, h" },
            { instruc = "ld d, l" },
            { instruc = "ld e, a" },
            { instruc = "ld e, b" },
            { instruc = "ld e, c" },
            { instruc = "ld e, d" },
            { instruc = "ld e, e" },
            { instruc = "ld e, h" },
            { instruc = "ld e, l" },
            { instruc = "ld h, a" },
            { instruc = "ld h, b" },
            { instruc = "ld h, c" },
            { instruc = "ld h, d" },
            { instruc = "ld h, e" },
            { instruc = "ld h, h" },
            { instruc = "ld h, l" },
            { instruc = "ld l, a" },
            { instruc = "ld l, b" },
            { instruc = "ld l, c" },
            { instruc = "ld l, d" },
            { instruc = "ld l, e" },
            { instruc = "ld l, h" },
            { instruc = "ld l, l" },
            { instruc = "ld a, [hl]" },
            { instruc = "ld b, [hl]" },
            { instruc = "ld c, [hl]" },
            { instruc = "ld d, [hl]" },
            { instruc = "ld e, [hl]" },
            { instruc = "ld h, [hl]" },
            { instruc = "ld l, [hl]" },
            { instruc = "ld [hl], a" },
            { instruc = "ld [hl], b" },
            { instruc = "ld [hl], c" },
            { instruc = "ld [hl], d" },
            { instruc = "ld [hl], e" },
            { instruc = "ld [hl], h" },
            { instruc = "ld [hl], l" },
            { instruc = "ld a, [$ff00+c]" },
            { instruc = "ld [$ff00+c], a" },
            { instruc = "ld a, [hl+]" },
            { instruc = "ld a, [hl-]" },
            { instruc = "ld a, [bc]" },
            { instruc = "ld a, [de]" },
            { instruc = "ld [hl+], a" },
            { instruc = "ld [hl-], a" },
            { instruc = "ld [bc], a" },
            { instruc = "ld [de], a" },
            { instruc = "add a, a" },
            { instruc = "add a, b" },
            { instruc = "add a, c" },
            { instruc = "add a, d" },
            { instruc = "add a, e" },
            { instruc = "add a, h" },
            { instruc = "add a, l" },
            { instruc = "add a, [hl]" },
            { instruc = "adc a, a" },
            { instruc = "adc a, b" },
            { instruc = "adc a, c" },
            { instruc = "adc a, d" },
            { instruc = "adc a, e" },
            { instruc = "adc a, h" },
            { instruc = "adc a, l" },
            { instruc = "adc a, [hl]" },
            { instruc = "sub a, a" },
            { instruc = "sub a, b" },
            { instruc = "sub a, c" },
            { instruc = "sub a, d" },
            { instruc = "sub a, e" },
            { instruc = "sub a, h" },
            { instruc = "sub a, l" },
            { instruc = "sub a, [hl]" },
            { instruc = "sbc a, a" },
            { instruc = "sbc a, b" },
            { instruc = "sbc a, c" },
            { instruc = "sbc a, d" },
            { instruc = "sbc a, e" },
            { instruc = "sbc a, h" },
            { instruc = "sbc a, l" },
            { instruc = "sbc a, [hl]" },
            { instruc = "add hl, hl" },
            { instruc = "add hl, bc" },
            { instruc = "add hl, de" },
            { instruc = "daa" },
            { instruc = "scf" },
            { instruc = "and a, a" },
            { instruc = "and a, b" },
            { instruc = "and a, c" },
            { instruc = "and a, d" },
            { instruc = "and a, e" },
            { instruc = "and a, h" },
            { instruc = "and a, l" },
            { instruc = "and a, [hl]" },
            { instruc = "xor a, a" },
            { instruc = "xor a, b" },
            { instruc = "xor a, c" },
            { instruc = "xor a, d" },
            { instruc = "xor a, e" },
            { instruc = "xor a, h" },
            { instruc = "xor a, l" },
            { instruc = "xor a, [hl]" },
            { instruc = "or a, a" },
            { instruc = "or a, b" },
            { instruc = "or a, c" },
            { instruc = "or a, d" },
            { instruc = "or a, e" },
            { instruc = "or a, h" },
            { instruc = "or a, l" },
            { instruc = "or a, [hl]" },
            { instruc = "cp a, a" },
            { instruc = "cp a, b" },
            { instruc = "cp a, c" },
            { instruc = "cp a, d" },
            { instruc = "cp a, e" },
            { instruc = "cp a, h" },
            { instruc = "cp a, l" },
            { instruc = "cp a, [hl]" },
            { instruc = "cpl" },
            { instruc = "ccf" },
            { instruc = "rlca" },
            { instruc = "rla" },
            { instruc = "rrca" },
            { instruc = "rra" },
            { instruc = "inc a" },
            { instruc = "inc b" },
            { instruc = "inc c" },
            { instruc = "inc d" },
            { instruc = "inc e" },
            { instruc = "inc h" },
            { instruc = "inc l" },
            { instruc = "inc hl" },
            { instruc = "inc bc" },
            { instruc = "inc de" },
            { instruc = "inc [hl]" },
            { instruc = "dec a" },
            { instruc = "dec b" },
            { instruc = "dec c" },
            { instruc = "dec d" },
            { instruc = "dec e" },
            { instruc = "dec h" },
            { instruc = "dec l" },
            { instruc = "dec hl" },
            { instruc = "dec bc" },
            { instruc = "dec de" },
            { instruc = "dec [hl]" },
            { instruc = "push af" },
            { instruc = "push bc" },
            { instruc = "push de" },
            { instruc = "push hl" },
            { instruc = "pop af" },
            { instruc = "pop bc" },
            { instruc = "pop de" },
            { instruc = "pop hl" },
            { instruc = "inc sp" },
            { instruc = "dec sp" },
            { instruc = "ld sp, hl" },
            { instruc = "add hl, sp" },
            { instruc = "jp hl" },
            { instruc = "rst 00h" },
            { instruc = "rst 08h" },
            { instruc = "rst 10h" },
            { instruc = "rst 18h" },
            { instruc = "rst 20h" },
            { instruc = "rst 28h" },
            { instruc = "rst 30h" },
            { instruc = "rst 38h" },
            { instruc = "ret" },
            { instruc = "reti" },
            { instruc = "ret c" },
            { instruc = "ret z" },
            { instruc = "ret nc" },
            { instruc = "ret nz" }
      })
   end)

   it("reads instructions with a dynamic byte operand", function()
      local rom = create_rom()
      read_rom(rom, io.open("./spec/fixtures/byte_op_instructions.gb", "rb"))
      assert.are.same(rom.banks[0].instructions, {
            { instruc = "ld a, n8", data = string.char(0x00), size = 2 },
            { instruc = "ld b, n8", data = string.char(0x10), size = 2 },
            { instruc = "ld c, n8", data = string.char(0x20), size = 2 },
            { instruc = "ld d, n8", data = string.char(0x30), size = 2 },
            { instruc = "ld e, n8", data = string.char(0x40), size = 2 },
            { instruc = "ld h, n8", data = string.char(0x50), size = 2 },
            { instruc = "ld l, n8", data = string.char(0x60), size = 2 },
            { instruc = "ldio a, [$ff00+n8]", data = string.char(0x70), size = 2 },
            { instruc = "ldio [$ff00+n8], a", data = string.char(0x80), size = 2 },
            { instruc = "ld [hl], n8", data = string.char(0x90), size = 2 },
            { instruc = "add a, n8", data = string.char(0xa0), size = 2 },
            { instruc = "adc a, n8", data = string.char(0xb0), size = 2 },
            { instruc = "sub a, n8", data = string.char(0xc0), size = 2 },
            { instruc = "sbc a, n8", data = string.char(0xd0), size = 2 },
            { instruc = "and a, n8", data = string.char(0xe0), size = 2 },
            { instruc = "xor a, n8", data = string.char(0xf0), size = 2 },
            { instruc = "or a, n8", data = string.char(0x01), size = 2 },
            { instruc = "cp a, n8", data = string.char(0x11), size = 2 },
            { instruc = "add sp, e8", data = string.char(0x21), size = 2 },
            { instruc = "ld hl, sp+e8", data = string.char(0x31), size = 2 },
            { instruc = "jr e8", data = string.char(0xfe), size = 2 },
            { instruc = "jr c, e8", data = string.char(0xfc), size = 2 },
            { instruc = "jr z, e8", data = string.char(0xfa), size = 2 },
            { instruc = "jr nc, e8", data = string.char(0xf8), size = 2 },
            { instruc = "jr nz, e8", data = string.char(0xf6), size = 2 },
      })
   end)

   it("reads instructions with a dynamic octet operand", function()
      local rom = create_rom()
      read_rom(rom, io.open("./spec/fixtures/octet_op_instructions.gb", "rb"))
      assert.are.same(rom.banks[0].instructions, {
            { instruc = "ld a, [n16]", data = { string.char(0x00), string.char(0x00) }, size = 3 },
            { instruc = "ld [n16], a", data = { string.char(0x00), string.char(0x01) }, size = 3 },
            { instruc = "ld hl, n8", data = { string.char(0x00), string.char(0x02) }, size = 3 },
            { instruc = "ld bc, n8", data = { string.char(0x00), string.char(0x03) }, size = 3 },
            { instruc = "ld de, n8", data = { string.char(0x00), string.char(0x04) }, size = 3 },
            { instruc = "ld sp, n16", data = { string.char(0x00), string.char(0x05) }, size = 3 },
            { instruc = "ld [n16], sp", data = { string.char(0x00), string.char(0x06) }, size = 3 },
            { instruc = "call n16", data = { string.char(0x00), string.char(0x07) }, size = 3 },
            { instruc = "call c, n16", data = { string.char(0x00), string.char(0x08) }, size = 3 },
            { instruc = "call z, n16", data = { string.char(0x00), string.char(0x09) }, size = 3 },
            { instruc = "call nc, n16", data = { string.char(0x00), string.char(0x0a) }, size = 3 },
            { instruc = "call nz, n16", data = { string.char(0x00), string.char(0x0b) }, size = 3 },
            { instruc = "jp n16", data = { string.char(0x00), string.char(0x0c) }, size = 3 },
            { instruc = "jp c, n16", data = { string.char(0x00), string.char(0x0f) }, size = 3 },
            { instruc = "jp z, n16", data = { string.char(0x00), string.char(0x10) }, size = 3 },
            { instruc = "jp nc, n16", data = { string.char(0x00), string.char(0x11) }, size = 3 },
            { instruc = "jp nz, n16", data = { string.char(0x00), string.char(0x12) }, size = 3 },
      })
   end)

   it("reads extended instructions", function()
      local rom = create_rom()
      read_rom(rom, io.open("./spec/fixtures/extended_instructions.gb", "rb"))
      assert.are.same(rom.banks[0].instructions, {
            { instruc = "stop", size = 2 },
            { instruc = "rlc a", size = 2 },
            { instruc = "rlc b", size = 2 },
            { instruc = "rlc c", size = 2 },
            { instruc = "rlc d", size = 2 },
            { instruc = "rlc e", size = 2 },
            { instruc = "rlc h", size = 2 },
            { instruc = "rlc l", size = 2 },
            { instruc = "rlc [hl]", size = 2 },
            { instruc = "rrc a", size = 2 },
            { instruc = "rrc b", size = 2 },
            { instruc = "rrc c", size = 2 },
            { instruc = "rrc d", size = 2 },
            { instruc = "rrc e", size = 2 },
            { instruc = "rrc h", size = 2 },
            { instruc = "rrc l", size = 2 },
            { instruc = "rrc [hl]", size = 2 },
            { instruc = "rl a", size = 2 },
            { instruc = "rl b", size = 2 },
            { instruc = "rl c", size = 2 },
            { instruc = "rl d", size = 2 },
            { instruc = "rl e", size = 2 },
            { instruc = "rl h", size = 2 },
            { instruc = "rl l", size = 2 },
            { instruc = "rl [hl]", size = 2 },
            { instruc = "rr a", size = 2 },
            { instruc = "rr b", size = 2 },
            { instruc = "rr c", size = 2 },
            { instruc = "rr d", size = 2 },
            { instruc = "rr e", size = 2 },
            { instruc = "rr h", size = 2 },
            { instruc = "rr l", size = 2 },
            { instruc = "rr [hl]", size = 2 },
            { instruc = "sla a", size = 2 },
            { instruc = "sla b", size = 2 },
            { instruc = "sla c", size = 2 },
            { instruc = "sla d", size = 2 },
            { instruc = "sla e", size = 2 },
            { instruc = "sla h", size = 2 },
            { instruc = "sla l", size = 2 },
            { instruc = "sla [hl]", size = 2 },
            { instruc = "sra a", size = 2 },
            { instruc = "sra b", size = 2 },
            { instruc = "sra c", size = 2 },
            { instruc = "sra d", size = 2 },
            { instruc = "sra e", size = 2 },
            { instruc = "sra h", size = 2 },
            { instruc = "sra l", size = 2 },
            { instruc = "sra [hl]", size = 2 },
            { instruc = "swap a", size = 2 },
            { instruc = "swap b", size = 2 },
            { instruc = "swap c", size = 2 },
            { instruc = "swap d", size = 2 },
            { instruc = "swap e", size = 2 },
            { instruc = "swap h", size = 2 },
            { instruc = "swap l", size = 2 },
            { instruc = "swap [hl]", size = 2 },
            { instruc = "srl a", size = 2 },
            { instruc = "srl b", size = 2 },
            { instruc = "srl c", size = 2 },
            { instruc = "srl d", size = 2 },
            { instruc = "srl e", size = 2 },
            { instruc = "srl h", size = 2 },
            { instruc = "srl l", size = 2 },
            { instruc = "srl [hl]", size = 2 },
            { instruc = "bit 0, a", size = 2 },
            { instruc = "bit 0, b", size = 2 },
            { instruc = "bit 0, c", size = 2 },
            { instruc = "bit 0, d", size = 2 },
            { instruc = "bit 0, e", size = 2 },
            { instruc = "bit 0, h", size = 2 },
            { instruc = "bit 0, l", size = 2 },
            { instruc = "bit 0, [hl]", size = 2 },
            { instruc = "bit 1, a", size = 2 },
            { instruc = "bit 1, b", size = 2 },
            { instruc = "bit 1, c", size = 2 },
            { instruc = "bit 1, d", size = 2 },
            { instruc = "bit 1, e", size = 2 },
            { instruc = "bit 1, h", size = 2 },
            { instruc = "bit 1, l", size = 2 },
            { instruc = "bit 1, [hl]", size = 2 },
            { instruc = "bit 2, a", size = 2 },
            { instruc = "bit 2, b", size = 2 },
            { instruc = "bit 2, c", size = 2 },
            { instruc = "bit 2, d", size = 2 },
            { instruc = "bit 2, e", size = 2 },
            { instruc = "bit 2, h", size = 2 },
            { instruc = "bit 2, l", size = 2 },
            { instruc = "bit 2, [hl]", size = 2 },
            { instruc = "bit 3, a", size = 2 },
            { instruc = "bit 3, b", size = 2 },
            { instruc = "bit 3, c", size = 2 },
            { instruc = "bit 3, d", size = 2 },
            { instruc = "bit 3, e", size = 2 },
            { instruc = "bit 3, h", size = 2 },
            { instruc = "bit 3, l", size = 2 },
            { instruc = "bit 3, [hl]", size = 2 },
            { instruc = "bit 4, a", size = 2 },
            { instruc = "bit 4, b", size = 2 },
            { instruc = "bit 4, c", size = 2 },
            { instruc = "bit 4, d", size = 2 },
            { instruc = "bit 4, e", size = 2 },
            { instruc = "bit 4, h", size = 2 },
            { instruc = "bit 4, l", size = 2 },
            { instruc = "bit 4, [hl]", size = 2 },
            { instruc = "bit 5, a", size = 2 },
            { instruc = "bit 5, b", size = 2 },
            { instruc = "bit 5, c", size = 2 },
            { instruc = "bit 5, d", size = 2 },
            { instruc = "bit 5, e", size = 2 },
            { instruc = "bit 5, h", size = 2 },
            { instruc = "bit 5, l", size = 2 },
            { instruc = "bit 5, [hl]", size = 2 },
            { instruc = "bit 6, a", size = 2 },
            { instruc = "bit 6, b", size = 2 },
            { instruc = "bit 6, c", size = 2 },
            { instruc = "bit 6, d", size = 2 },
            { instruc = "bit 6, e", size = 2 },
            { instruc = "bit 6, h", size = 2 },
            { instruc = "bit 6, l", size = 2 },
            { instruc = "bit 6, [hl]", size = 2 },
            { instruc = "bit 7, a", size = 2 },
            { instruc = "bit 7, b", size = 2 },
            { instruc = "bit 7, c", size = 2 },
            { instruc = "bit 7, d", size = 2 },
            { instruc = "bit 7, e", size = 2 },
            { instruc = "bit 7, h", size = 2 },
            { instruc = "bit 7, l", size = 2 },
            { instruc = "bit 7, [hl]", size = 2 },
            { instruc = "res 0, a", size = 2 },
            { instruc = "res 0, b", size = 2 },
            { instruc = "res 0, c", size = 2 },
            { instruc = "res 0, d", size = 2 },
            { instruc = "res 0, e", size = 2 },
            { instruc = "res 0, h", size = 2 },
            { instruc = "res 0, l", size = 2 },
            { instruc = "res 0, [hl]", size = 2 },
            { instruc = "res 1, a", size = 2 },
            { instruc = "res 1, b", size = 2 },
            { instruc = "res 1, c", size = 2 },
            { instruc = "res 1, d", size = 2 },
            { instruc = "res 1, e", size = 2 },
            { instruc = "res 1, h", size = 2 },
            { instruc = "res 1, l", size = 2 },
            { instruc = "res 1, [hl]", size = 2 },
            { instruc = "res 2, a", size = 2 },
            { instruc = "res 2, b", size = 2 },
            { instruc = "res 2, c", size = 2 },
            { instruc = "res 2, d", size = 2 },
            { instruc = "res 2, e", size = 2 },
            { instruc = "res 2, h", size = 2 },
            { instruc = "res 2, l", size = 2 },
            { instruc = "res 2, [hl]", size = 2 },
            { instruc = "res 3, a", size = 2 },
            { instruc = "res 3, b", size = 2 },
            { instruc = "res 3, c", size = 2 },
            { instruc = "res 3, d", size = 2 },
            { instruc = "res 3, e", size = 2 },
            { instruc = "res 3, h", size = 2 },
            { instruc = "res 3, l", size = 2 },
            { instruc = "res 3, [hl]", size = 2 },
            { instruc = "res 4, a", size = 2 },
            { instruc = "res 4, b", size = 2 },
            { instruc = "res 4, c", size = 2 },
            { instruc = "res 4, d", size = 2 },
            { instruc = "res 4, e", size = 2 },
            { instruc = "res 4, h", size = 2 },
            { instruc = "res 4, l", size = 2 },
            { instruc = "res 4, [hl]", size = 2 },
            { instruc = "res 5, a", size = 2 },
            { instruc = "res 5, b", size = 2 },
            { instruc = "res 5, c", size = 2 },
            { instruc = "res 5, d", size = 2 },
            { instruc = "res 5, e", size = 2 },
            { instruc = "res 5, h", size = 2 },
            { instruc = "res 5, l", size = 2 },
            { instruc = "res 5, [hl]", size = 2 },
            { instruc = "res 6, a", size = 2 },
            { instruc = "res 6, b", size = 2 },
            { instruc = "res 6, c", size = 2 },
            { instruc = "res 6, d", size = 2 },
            { instruc = "res 6, e", size = 2 },
            { instruc = "res 6, h", size = 2 },
            { instruc = "res 6, l", size = 2 },
            { instruc = "res 6, [hl]", size = 2 },
            { instruc = "res 7, a", size = 2 },
            { instruc = "res 7, b", size = 2 },
            { instruc = "res 7, c", size = 2 },
            { instruc = "res 7, d", size = 2 },
            { instruc = "res 7, e", size = 2 },
            { instruc = "res 7, h", size = 2 },
            { instruc = "res 7, l", size = 2 },
            { instruc = "res 7, [hl]", size = 2 },
            { instruc = "set 0, a", size = 2 },
            { instruc = "set 0, b", size = 2 },
            { instruc = "set 0, c", size = 2 },
            { instruc = "set 0, d", size = 2 },
            { instruc = "set 0, e", size = 2 },
            { instruc = "set 0, h", size = 2 },
            { instruc = "set 0, l", size = 2 },
            { instruc = "set 0, [hl]", size = 2 },
            { instruc = "set 1, a", size = 2 },
            { instruc = "set 1, b", size = 2 },
            { instruc = "set 1, c", size = 2 },
            { instruc = "set 1, d", size = 2 },
            { instruc = "set 1, e", size = 2 },
            { instruc = "set 1, h", size = 2 },
            { instruc = "set 1, l", size = 2 },
            { instruc = "set 1, [hl]", size = 2 },
            { instruc = "set 2, a", size = 2 },
            { instruc = "set 2, b", size = 2 },
            { instruc = "set 2, c", size = 2 },
            { instruc = "set 2, d", size = 2 },
            { instruc = "set 2, e", size = 2 },
            { instruc = "set 2, h", size = 2 },
            { instruc = "set 2, l", size = 2 },
            { instruc = "set 2, [hl]", size = 2 },
            { instruc = "set 3, a", size = 2 },
            { instruc = "set 3, b", size = 2 },
            { instruc = "set 3, c", size = 2 },
            { instruc = "set 3, d", size = 2 },
            { instruc = "set 3, e", size = 2 },
            { instruc = "set 3, h", size = 2 },
            { instruc = "set 3, l", size = 2 },
            { instruc = "set 3, [hl]", size = 2 },
            { instruc = "set 4, a", size = 2 },
            { instruc = "set 4, b", size = 2 },
            { instruc = "set 4, c", size = 2 },
            { instruc = "set 4, d", size = 2 },
            { instruc = "set 4, e", size = 2 },
            { instruc = "set 4, h", size = 2 },
            { instruc = "set 4, l", size = 2 },
            { instruc = "set 4, [hl]", size = 2 },
            { instruc = "set 5, a", size = 2 },
            { instruc = "set 5, b", size = 2 },
            { instruc = "set 5, c", size = 2 },
            { instruc = "set 5, d", size = 2 },
            { instruc = "set 5, e", size = 2 },
            { instruc = "set 5, h", size = 2 },
            { instruc = "set 5, l", size = 2 },
            { instruc = "set 5, [hl]", size = 2 },
            { instruc = "set 6, a", size = 2 },
            { instruc = "set 6, b", size = 2 },
            { instruc = "set 6, c", size = 2 },
            { instruc = "set 6, d", size = 2 },
            { instruc = "set 6, e", size = 2 },
            { instruc = "set 6, h", size = 2 },
            { instruc = "set 6, l", size = 2 },
            { instruc = "set 6, [hl]", size = 2 },
            { instruc = "set 7, a", size = 2 },
            { instruc = "set 7, b", size = 2 },
            { instruc = "set 7, c", size = 2 },
            { instruc = "set 7, d", size = 2 },
            { instruc = "set 7, e", size = 2 },
            { instruc = "set 7, h", size = 2 },
            { instruc = "set 7, l", size = 2 },
            { instruc = "set 7, [hl]", size = 2 }
      })
   end)

   it("reads data", function()
      local rom = create_rom()
      read_rom(rom, io.open("./spec/fixtures/non_instructions.gb", "rb"))
      assert.are.same(rom.banks[0].instructions, {
            -- All non-instruction bytes
            { data = { string.char(0xd3) } },
            { data = { string.char(0xe3) } },
            { data = { string.char(0xe4) } },
            { data = { string.char(0xf4) } },
            { data = { string.char(0xdb) } },
            { data = { string.char(0xeb) } },
            { data = { string.char(0xec) } },
            { data = { string.char(0xfc) } },
            { data = { string.char(0xed) } },
            { data = { string.char(0xdd) } }
      })
   end)

   it("reads cut off instruction", function()
      local rom = create_rom()
      read_rom(rom, io.open("./spec/fixtures/cut_off_instruction.gb", "rb"))
      assert.are.same(rom.banks[0].instructions, {
            { data = { string.char(0xcb) } }
      })
   end)
end)
